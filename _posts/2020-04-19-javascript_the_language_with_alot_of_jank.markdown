---
layout: post
title:      "Javascript the language with alot of jank"
date:       2020-04-20 02:05:09 +0000
permalink:  javascript_the_language_with_alot_of_jank
---


 Going into javascript I was a bit familiar with the core concepts as I had touched on them a bit in highschool. But the javascript I used in highschool had evolved and learned a couple new tricks. Alot of the initial problem I had with the language stemmed from a completely other problem and that was I had been learning Ruby and the frameworks to utilize it better before this. With that the general flow and concepts of how JS works are different as you can truly do anything with it but you have to be very specific about implementation. With Ruby and the Rails framework  both are very forgiving and can be fairly intuitive with what you are trying to accomplish. Going into my javascript front end for my project where I could have used form_for in rails I saw that with javascript its more involved as you can have a form but you have to create all of it. But with that comes the open ended ability to design and style it however you want and make it as interactive as you want. Javascript does definitely have its oddities though, one being almost everything is undefined on declaration till you call it. 

    This took some getting used to as I was constantly wondering if this had been setup properly or not. But being able to use the developer tools in Google Chrome have been great. They make it very easy to test and see exactly how your code will function. The caveat or possible benefit with Javascript is that it all fails on execution so in that aspect it is very test driven in a way unless you start using async functionality but even then it will still show you in execution what failed. I think my past experience with Ruby as a language has been a great benefit when it comes to learning javascript because of how much control and creativity that you can have when using it. Some of the jank and oddities with the language are very interesting such as that NULL is an object. Funny because in general null is normally the complete absence of meaning or value for something. Another weird implementation is that NaN which stands for "Not a Number" is quantified as a number in javascript but it is not equal to itself that definitely threw me for a loop and still does. I guess the point of all of this is that javascript seeks to abstract as much as possible for the benefit of making future implementation smarter on its own so we have to create applications  less programatically and more intuitively.
