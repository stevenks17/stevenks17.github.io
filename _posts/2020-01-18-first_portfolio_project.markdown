---
layout: post
title:      "First Portfolio Project"
date:       2020-01-18 19:10:37 +0000
permalink:  first_portfolio_project
---

     Coming into the first portfolio project I was nervous as to I was not sure if I had absorbed enough of what I had learned so far to turn a blank page into a working application. My initial process was I knew I wanted to use an API over scraping because I felt more comfortable with it. Early on after searching around I came through a list of Free APIs you can use on github. Right away I really liked the JokeAPI. But as I started working on creating the structure and the flow to understand how I would have my decision tree work for a user I realized that the jokeapi was robust but the interface and flow I wanted was not very fleshed out or really indicitive of how it would work. I initially had also seen the PokeAPI but for some reason or another I thought it required an API key and at the time I was unsure if I knew how to use an API that required authorization. But as we went over and used the same list to create CLI's in studygroups I saw that it was not difficult and alsol that the PokeAPI required no authorization.

    This was now Day 2 into my Joke CLI and I decided atleast for me it was easier for me to visualize a flow and put together decision trees as one of the CLIs we created during Study Groups was similar and I understood what was being done and could use it as a foundation  to go forward. So I decided to create my PokeDEX-CLI and almost mimic accessing a Pokedex much like in the series. I decided after seeing that I probably shouldnt do to many pokemon to ease the user experience I would start small and only query the Kanto region pokemon which are the first 151. It was fairly easy to understand what I would need by first starting in the CLI to create what the user would see and work with. 

     Moving on  there was  a Accessor method we worked on in class that was very helpful as it was something that abstracted a lot of logic that you can use in various programs to a certain degree as it initializes an attribute hash and uses the .send method along with the .respond_to to take in attributes that are already present in the api data and pass them in using my initialized attributes to link them as one object that I can display for each pokemon object. From there I worked on the final piece and that was actually defining the pipeline or connector I was going to use to grab data from the pokeapi website so I could utilize it to display the information I wanted in my CLI for the user to read. My initial get_all_pokemon used logic that was similar to lessons and study group work we did so grabbing the data via rest-client was fairly straight forward. But I realized that the initial hash was enough to grab pokemon names it did not however actually have any top level keys that would link to the attributes I was utilizing in my pokemon file as they had been nested in a hash under the "url" key . With my mentors assistance he helped me understand the logic I was trying to use instead of trying to code it before I knew what I was doing as sometimes using a whiteboard or just someone else to verbalize what you would like to do gives you a great deal of feedback that you may not necessarily think of inside your own head. So to add the data I required I used the rest client to get the value of the the data stored in the "url" key and then store it in a local variable and have this used inside each new pokemon object. This way when the keys were passed into my initialize they could be easily paired and be displayed within my CLI. All in all this entire process and the assistance of both my fellow cohort students and mentors showed me that while the initial task appered daunting the end result can be achieved as long as you plan accordingly and take it in bite size pieces solving one problem at a time and eventually it will all come together. I already do have some ideas in the future to flesh my intial CLI out with more features and better visuals to appear more like the pokedex you have seen in the franchise.
